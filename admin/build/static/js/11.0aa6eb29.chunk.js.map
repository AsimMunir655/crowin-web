{"version":3,"sources":["views/charts/MainChartExample.js","views/dashboard/Dashboard.js"],"names":["random","min","max","Math","floor","brandSuccess","getStyle","brandInfo","brandDanger","MainChartExample","attributes","defaultDatasets","data1","data2","data3","i","push","data","totalDoctors","totalConsultations","label","backgroundColor","hexToRgba","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","datasets","options","labels","WidgetsDropdown","lazy","Dashboard","countsData","currentDate","Date","sm","id","className","formatDate","color","name","map","value","active","style","height","marginTop","md","precision","totalPatients","doctorForms"],"mappings":"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","file":"static/js/11.0aa6eb29.chunk.js","sourcesContent":["import React from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\nexport const random = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n\nconst brandSuccess = getStyle(\"success\") || \"#4dbd74\";\nconst brandInfo = getStyle(\"info\") || \"#20a8d8\";\nconst brandDanger = getStyle(\"danger\") || \"#f86c6b\";\nconst MainChartExample = (attributes) => {\n  const defaultDatasets = (() => {\n    let elements = 27;\n    const data1 = [];\n    const data2 = [];\n    const data3 = [];\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(0, attributes?.data?.totalDoctors));\n      data2.push(random(0, attributes?.data?.totalDoctors));\n      data3.push(random(0, attributes?.data?.totalConsultations));\n    }\n\n    return [\n      {\n        label: \"Total Doctors\",\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data1,\n      },\n      {\n        label: \"Total Patients\",\n        backgroundColor: \"transparent\",\n        borderColor: brandSuccess,\n        pointHoverBackgroundColor: brandSuccess,\n        borderWidth: 2,\n        data: data2,\n      },\n      {\n        label: \"All Consultations\",\n        backgroundColor: \"transparent\",\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 2,\n        // borderDash: [8, 5],\n        data: data3,\n      },\n    ];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              drawOnChartArea: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(50 / 5),\n              max: 50,\n            },\n            gridLines: {\n              display: true,\n            },\n          },\n        ],\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3,\n        },\n      },\n    };\n  })();\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={[\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n      ]}\n    />\n  );\n};\n\nexport default MainChartExample;\n","import CIcon from \"@coreui/icons-react\";\nimport {\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CProgress,\n  CRow,\n} from \"@coreui/react\";\nimport { format as formatDate } from \"date-fns\";\nimport React, { lazy } from \"react\";\nimport MainChartExample from \"../charts/MainChartExample.js\";\n\nconst WidgetsDropdown = lazy(() => import(\"../widgets/WidgetsDropdown.js\"));\n// const WidgetsBrand = lazy(() => import(\"../widgets/WidgetsBrand.js\"));\n\nconst Dashboard = () => {\n  // const { data: countsData } = useQuery(\"Counts\", getDashboardCounts);\n  const countsData = {};\n  const data = countsData?.data;\n  const currentDate = new Date();\n  return (\n    <>\n      <WidgetsDropdown data={data} />\n      <CCard>\n        <CCardBody>\n          <CRow>\n            <CCol sm=\"5\">\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Statistic\n              </h4>\n              <div className=\"small text-muted\">\n                {formatDate(currentDate, \"MMMM y\")}\n              </div>\n            </CCol>\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-right\">\n                <CIcon name=\"cil-cloud-download\" />\n              </CButton>\n              <CButtonGroup className=\"float-right mr-3\">\n                {[\"Month\"].map((value) => {\n                  return (\n                    <CButton\n                      color=\"outline-secondary\"\n                      key={value}\n                      className=\"mx-0\"\n                      active={value === \"Month\"}\n                    >\n                      {value}\n                    </CButton>\n                  );\n                })}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <MainChartExample\n            data={data}\n            style={{ height: \"300px\", marginTop: \"40px\" }}\n          />\n        </CCardBody>\n        <CCardFooter>\n          <CRow className=\"text-center\">\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\n              <strong> Doctors {data?.totalDoctors}</strong>\n              <CProgress\n                className=\"progress-xs mt-2\"\n                precision={1}\n                color=\"success\"\n                value={data?.totalDoctors}\n              />\n            </CCol>\n\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\n              <strong>Total Patients {data?.totalPatients} </strong>\n              <CProgress\n                className=\"progress-xs mt-2\"\n                precision={1}\n                color=\"warning\"\n                value={data?.totalPatients}\n              />\n            </CCol>\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\n              <strong>\n                Total Consultations Forms {data?.totalConsultations}{\" \"}\n              </strong>\n              <CProgress\n                className=\"progress-xs mt-2\"\n                precision={1}\n                color=\"danger\"\n                value={data?.doctorForms}\n              />\n            </CCol>\n          </CRow>\n        </CCardFooter>\n      </CCard>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}