{"version":3,"sources":["views/charts/ChartLineSimple.js","views/widgets/WidgetsDropdown.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","WidgetsDropdown","data1","data2","data3","i","push","random","totalDoctors","totalConsultations","sm","lg","header","text","footerSlot","className","style","height","totalPatients"],"mappings":"sQAKMA,EAAkB,SAAAC,GAEtB,IACEC,EAOED,EAPFC,YACAC,EAMEF,EANFE,gBACAC,EAKEH,EALFG,0BACAC,EAIEJ,EAJFI,WACAC,EAGEL,EAHFK,MACAC,EAEEN,EAFFM,QACGC,EAPL,YAQIP,EARJ,GAUMQ,EACAL,IAE2B,gBAApBD,EACFA,EAEFD,GAGHQ,EACG,CACL,CACEC,KAAMN,EACNH,YAAaU,mBAASV,GACtBC,gBAAiBS,mBAAST,GAC1BU,qBAAsBD,mBAASH,GAC/BL,0BAA2BQ,mBAASH,GACpCH,UAKAQ,EACG,CACLC,OAAQ,CACNC,MAAO,CACL,CACEC,QAAQ,EACRC,UAAW,CACTC,MAAO,cACPC,cAAe,eAEjBC,MAAO,CACLC,SAAU,EACVC,UAAW,iBAIjBC,MAAO,CACL,CACEC,SAAS,EACTJ,MAAO,CACLI,SAAS,EACTC,IAAKC,KAAKD,IAAIE,MAAMD,KAAMtB,GAAc,EACxCwB,IAAKF,KAAKE,IAAID,MAAMD,KAAMtB,GAAc,MAKhDyB,SAAU,CACRC,KAAM,CACJC,YAAa,GAEfC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,KAMfC,EACG,CACLtB,OAAQ,CACNC,MAAO,CAAC,CACNS,SAAS,IAEXD,MAAO,CAAC,CACNC,SAAS,KAGbK,SAAU,CACRC,KAAM,CACJC,YAAa,GAEfC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,KAMfE,EAAkB,WACtB,IAAMC,EAAUhC,EAAUO,EAAiBuB,EACzC,OAAOG,OAAOC,OAAO,GAAIF,EAAS,CAChCG,qBAAqB,EACrBC,OAAQ,CACNlB,SAAS,KALO,GAUlBmB,EACGC,2BAAiBnC,EAAiBF,EAAWsC,UAAY,IAG5DC,EACGF,2BAAiBP,EAAgB9B,EAAW+B,SAAW,IAKhE,OACE,cAAC,IAAD,2BACM/B,GADN,IAEEsC,SAAUF,EACVL,QAASQ,EACTC,OAAQ1C,MAiBdN,EAAgBiD,aAAe,CAC7B/C,YAAa,wBACbC,gBAAiB,cACjBE,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzDC,MAAO,SAGMN,Q,SCvEAkD,UA3ES,SAAC,GAKvB,IALqC,IAAZvC,EAAW,EAAXA,KAEnBwC,EAAQ,GACRC,EAAQ,GACRC,EAAQ,GACLC,EAAI,EAAGA,GAJD,GAIgBA,IAC7BH,EAAMI,KAAKC,YAAO,EAAD,OAAI7C,QAAJ,IAAIA,OAAJ,EAAIA,EAAM8C,eAC3BL,EAAMG,KAAKC,YAAO,EAAD,OAAI7C,QAAJ,IAAIA,OAAJ,EAAIA,EAAM8C,eAC3BJ,EAAME,KAAKC,YAAO,EAAD,OAAI7C,QAAJ,IAAIA,OAAJ,EAAIA,EAAM+C,qBAG7B,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMC,GAAG,IAAIC,GAAG,IAAhB,SACE,cAAC,IAAD,CACEzC,MAAM,mBACN0C,QAAY,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAM8C,eAAgB,IAC9BK,KAAK,gBACLC,WACE,cAAC,EAAD,CACExD,SAAO,EACPyD,UAAU,4BACVC,MAAO,CAAEC,OAAQ,QACjB7D,WAAY8C,EACZ/C,0BAA0B,UAC1BE,MAAM,UACN0C,OAAO,eAMf,cAAC,IAAD,CAAMW,GAAG,IAAIC,GAAG,IAAhB,SACE,cAAC,IAAD,CACEzC,MAAM,mBACN0C,QAAY,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAMwD,gBAAiB,IAC/BL,KAAK,iBACLC,WACE,cAAC,EAAD,CACEC,UAAU,OACVC,MAAO,CAAEC,OAAQ,QACjB/D,gBAAgB,uBAChBE,WAAY+C,EACZb,QAAS,CAAET,SAAU,CAAEC,KAAM,CAAEC,YAAa,OAC5C5B,0BAA0B,UAC1BE,MAAM,WACN0C,OAAO,eAMf,cAAC,IAAD,CAAMW,GAAG,IAAIC,GAAG,IAAhB,SACE,cAAC,IAAD,CACEzC,MAAM,kBACN0C,QAAY,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAM+C,qBAAsB,IACpCI,KAAK,qBACLC,WACE,cAAC,EAAD,CACEC,UAAU,OACVC,MAAO,CAAEC,OAAQ,QACjB/D,gBAAgB,uBAChBE,WAAYgD,EACZd,QAAS,CAAET,SAAU,CAAEC,KAAM,CAAEC,YAAa,OAC5C5B,0BAA0B,UAC1BE,MAAM,gBACN0C,OAAO","file":"static/js/14.9171738a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import { CCol, CRow, CWidgetDropdown } from \"@coreui/react\";\nimport React from \"react\";\nimport ChartLineSimple from \"../charts/ChartLineSimple\";\nimport { random } from \"../charts/MainChartExample\";\n\nconst WidgetsDropdown = ({ data }) => {\n  let elements = 10;\n  const data1 = [];\n  const data2 = [];\n  const data3 = [];\n  for (let i = 0; i <= elements; i++) {\n    data1.push(random(0, data?.totalDoctors));\n    data2.push(random(0, data?.totalDoctors));\n    data3.push(random(0, data?.totalConsultations));\n  }\n  // render\n  return (\n    <CRow>\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-primary\"\n          header={data?.totalDoctors || \"0\"}\n          text=\"Total Doctors\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"c-chart-wrapper mt-3 mx-3\"\n              style={{ height: \"70px\" }}\n              dataPoints={data1}\n              pointHoverBackgroundColor=\"primary\"\n              label=\"Doctors\"\n              labels=\"months\"\n            />\n          }\n        ></CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header={data?.totalPatients || \"0\"}\n          text=\"Total Patients\"\n          footerSlot={\n            <ChartLineSimple\n              className=\"mt-3\"\n              style={{ height: \"70px\" }}\n              backgroundColor=\"rgba(255,255,255,.2)\"\n              dataPoints={data2}\n              options={{ elements: { line: { borderWidth: 2.5 } } }}\n              pointHoverBackgroundColor=\"warning\"\n              label=\"Patients\"\n              labels=\"months\"\n            />\n          }\n        ></CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-danger\"\n          header={data?.totalConsultations || \"0\"}\n          text=\"All Consultations \"\n          footerSlot={\n            <ChartLineSimple\n              className=\"mt-3\"\n              style={{ height: \"70px\" }}\n              backgroundColor=\"rgba(255,255,255,.2)\"\n              dataPoints={data3}\n              options={{ elements: { line: { borderWidth: 2.5 } } }}\n              pointHoverBackgroundColor=\"warning\"\n              label=\"Consultations\"\n              labels=\"months\"\n            />\n          }\n        ></CWidgetDropdown>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default WidgetsDropdown;\n"],"sourceRoot":""}